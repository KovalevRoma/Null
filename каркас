#include <algorithm>
#include <iomanip>
#include <iostream>
#include <vector>
#include <cmath>

const int BASE = 10'000;
const int BASE_LEN = static_cast<int>(std::log10(BASE));


class bigint {
private:
    std::vector<unsigned int> nums;

public:
    bigint() {
        nums.clear();
        nums.push_back(0);
    }

    bigint(std::string s) {  // cppcheck-suppress noExplicitConstructor
        nums.clear();

        while (s[0] == '0') {
            s = s.substr(1);
        }

        const int len = static_cast<int>(s.length());
        int num = 0;
        int p = 1;

        for (int i = len - 1; i >= 0; i--) {
            num += (s[i] - '0') * p;
            p *= 10;

            if (p == BASE) {
                // std::cout << num << " ";
                nums.push_back(num);
                num = 0;
                p = 1;
            }
        }
        if (num != 0 || nums.empty()) {
            nums.push_back(num);
        }
    }

    bigint(unsigned int num) {  // cppcheck-suppress noExplicitConstructor
        nums.clear();

        while (num > 0) {
            nums.push_back(num % BASE);
            num /= BASE;
        }
    }

    friend bool operator<(const bigint &first, const bigint &second);

    friend bool operator>(const bigint &first, const bigint &second);

    friend bool operator==(const bigint &first, const bigint &second);

    friend bool operator!=(const bigint &first, const bigint &second);

    friend bool operator<=(const bigint &first, const bigint &second);

    friend bool operator>=(const bigint &first, const bigint &second);

    friend bigint operator+(const bigint &first, const bigint &second);

    friend bigint operator-(const bigint &first, const bigint &second);

    bigint operator+=(const bigint &other) {
        (*this) = (*this) + other;
        return (*this);
    }

    bigint operator-=(const bigint &other) {
        (*this) = (*this) - other;
        return (*this);
    }

    bigint operator++() {
        (*this) = (*this) + 1;
        return (*this);
    }

    bigint operator++(int) {
        bigint cop = (*this);
        (*this) = (*this) + 1;
        return cop;
    }

    bigint operator--() {
        (*this) = (*this) - 1;
        return (*this);
    }

    bigint operator--(int) {
        bigint cop = (*this);
        (*this) = (*this) - 1;
        return cop;
    }

    explicit operator unsigned int() const {
        unsigned int num = 0;
        int p = 1;
        for (const unsigned int num_vaue : nums) {
            num += num_vaue * p;
            p *= BASE;
        }
        return num;
    }

    friend std::ostream &operator<<(std::ostream &os, const bigint &other);

    friend std::istream &operator>>(std::istream &ss, bigint &other);

    [[nodiscard]] std::string to_string() const {
        const unsigned long num = nums.size();
        std::string str = std::to_string(nums[num - 1]);

        for (int i = static_cast<int>(num) - 2; i >= 0; i--) {
            std::string s = std::to_string(nums[i]);
            for (int j = (std::to_string(nums[i])).size();
                 j < BASE_LEN; j++) {
                s = std::string(1, '0').append(s);
            }
            str += s;
        }
        return str;
    }
};

bool operator<(const bigint &first, const bigint &second) {
    if (first.nums.size() != second.nums.size()) {
        return first.nums.size() < second.nums.size();
    } else {
        for (int i = static_cast<int>(first.nums.size()) - 1; i >= 0; i--) {
            if (first.nums[i] != second.nums[i]) {
                return first.nums[i] < second.nums[i];
            }
        }
    }
    return false;
}

bool operator>(const bigint &first, const bigint &second) {
    return !(first < second) && (second != first);
}

bool operator==(const bigint &first, const bigint &second) {
    return first.nums == second.nums;
}

bool operator<=(const bigint &first, const bigint &second) {
    return !(first > second);
}

bool operator>=(const bigint &first, const bigint &second) {
    return !(first < second);
}

bool operator!=(const bigint &first, const bigint &second) {
    return !(first == second);
}

bigint operator+(const bigint& left, const bigint& right){
    bigint res, dop;
    if(left.nums.size() < right.nums.size()){
        res = right;
        dop = left;
    }
    else{
        res = left;
        dop = right;
    }
    auto n = dop.nums.size();
    for(auto i = 0; i < n; i++){
        res.nums[i] += dop.nums[i];
        if(res.nums[i] > BASE - 1){
            if(i == res.nums.size()-1){
                res.nums.push_back(0);
            }
            res.nums[i+1] += res.nums[i]/BASE;
            res.nums[i] = res.nums[i] % BASE;
        }
    }
    return res;
}
bigint operator-(const bigint& left,const bigint& right){
    auto n = right.nums.size();
    bigint dop = left;
    for(auto i = 0; i < n; i++){
        dop.nums[i] -= right.nums[i];
        if(dop.nums[i] < 0){
            dop.nums[i] += BASE;
            dop.nums[i+1]--;
        }
    }
    int i = dop.nums.size() - 1;
    while(i > 0 && dop.nums[i--] == 0){
        dop.nums.pop_back();
    }
    return dop;
}

std::ostream &operator<<(std::ostream &os, const bigint &other) {
    int i = static_cast<int>(other.nums.size()) - 1;
    os << other.nums[i];
    i--;
    for (; i >= 0; i--) {
        os << std::setfill('0') << std::setw(BASE_LEN) << other.nums[i];
    }
    return os;
}

std::istream &operator>>(std::istream &ss, bigint &other) {
    std::string str;
    ss >> str;
    other = bigint(str);
    return ss;
}

int main(){
    bigint a;
    bigint b = a += 10000;
    std::cout << ("10000" == a.to_string())<< "\n";
    std::cout << ("10000" == b.to_string())<< "\n";
    a += 0;
    std::cout << ("10000" == a.to_string())<< "\n";
    a += bigint("999999999999999999999999999999");
    //std::cout << a.to_string();
    //std::cout << ("1000000000000000000000000009999" == a.to_string())<< "\n";
    a += 1;
    //std::cout << ("1000000000000000000000000010000" == a.to_string())<< "\n";
    return 0;
}
