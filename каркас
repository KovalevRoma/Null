#include <iostream>
#include <vector>
#include <string>
#include <cmath>

const int BASE = 10;
const int BASE_LEN = static_cast<int>(std::log10(BASE));

class bigint{
private:
    std::vector<int> nums;
public:

    bigint(){
        nums = {0};
    }

    bigint(unsigned int a){
        nums.clear();
        if(a == 0){
            nums.push_back(0);
        }
        while (a != 0){
            nums.push_back(a % BASE);
            a = a / BASE;
        }
    }
    bigint(std::string s) {
        nums.clear();
        while (s.size() > 1 && s[0] == '0'){
            s = s.substr(1);
        }
        for (auto i = s.length(); i > 0; i -= BASE_LEN) {
            if (i < BASE_LEN) {
                nums.push_back(std::stoi(s.substr(0, i)));
                break;
            }
            else {
                //std::cout << s.substr(i - BASE_LEN, BASE_LEN) << std::endl;
                nums.push_back(std::stoi(s.substr(i - BASE_LEN, BASE_LEN)));
            }
        }


    }
    explicit operator unsigned int() const{
        unsigned int BASE_TAIL = 1, ans = 0;
        for(auto k : (*this).nums){
            ans+= k * BASE_TAIL;
            BASE_TAIL *= BASE;
        }
        return ans;
    }
    friend bigint operator-(const bigint& left,const bigint& right);
    friend bigint operator+(const bigint& left, const bigint& right);


    std::string to_string() const{
        const unsigned long num = nums.size();
        std::string str = std::to_string(nums[num - 1]);
        for (int i = static_cast<int>(num) - 2; i >= 0; i--) {
            std::string s = std::to_string(nums[i]);
            s = std::string(BASE_LEN - static_cast<int>(std::log10(nums[i])), '0').append(s);
            str += s;
        }
        return str;
    }


    friend bool operator==(const bigint& left, const bigint& right);
    friend bool operator>(const bigint &left, const bigint& right);
    bigint& operator++ ()
    {
        *this = *this + 1;
        return *this;
    }
    bigint& operator-- ()
    {
        *this = *this - 1;
        return *this;
    }
    bigint operator++ (int){
        bigint copy {*this};
        ++(*this);
        return copy;
    }
    bigint operator-- (int){
        bigint copy {*this};
        --(*this);
        return copy;
    }
    ~bigint() = default;
};

bigint operator-(const bigint& left,const bigint& right){
    auto n = right.nums.size();
    bigint dop = left;
    for(auto i = 0; i < n; i++){
        dop.nums[i] -= right.nums[i];
        if(dop.nums[i] < 0){
            dop.nums[i] += BASE;
            dop.nums[i+1]--;
        }
    }
    int i = dop.nums.size() - 1;
    while(i > 0 && dop.nums[i--] == 0){
        dop.nums.pop_back();
    }
    return dop;
}
bigint operator+(const bigint& left, const bigint& right){
    bigint res, dop;
    if(left.nums.size() < right.nums.size()){
        res = right;
        dop = left;
    }
    else{
        res = left;
        dop = right;
    }
    auto n = dop.nums.size();
    for(auto i = 0; i < n; i++){
        res.nums[i] += dop.nums[i];
        if(res.nums[i] > BASE - 1){
            if(i == res.nums.size()-1){
                res.nums.push_back(0);
            }
            res.nums[i+1] += res.nums[i]/BASE;
            res.nums[i] = res.nums[i] % BASE;
        }
    }
    return res;
}


bigint operator+=(bigint &left, const bigint& right){
    left = left+right;
    return left;
}
bigint operator-=(bigint &left, const bigint& right){
    left = left-right;
    return left;
}

bool operator==(const bigint& left, const bigint& right){
    if(left.nums == right.nums){
        return true;
    }
    return false;
}
bool operator!=(const bigint &left, const bigint& right) {
    return !(left == right);
}
bool operator>(const bigint &left, const bigint& right){

    if(left.nums.size() == right.nums.size()){
        if(left == right) {
            return false;
        }
        else {
            auto i = left.nums.size() - 1;
            while (left.nums[i] == right.nums[i]) {
                i--;
            }
            return (left.nums[i] > right.nums[i]);
        }
    }
    return(left.nums.size() > right.nums.size());
}
bool operator<(const bigint &left, const bigint& right) {
    return(right > left);
}
bool operator<=(const bigint &left, const bigint& right) {
    return ((left < right) || (left == right));
}
bool operator>=(const bigint &left, const bigint& right) {
    return ((left > right) || (left == right));
}

std::ostream &operator<<(std::ostream &os, const bigint &x) {
    std::string s = x.to_string();
    os << s;
    return os;
}

std::istream &operator>>(std::istream &ss, bigint &other) {
    std::string str;
    ss >> str;
    other = bigint(str);
    return ss;
}

int main(){
    bigint a;
    bigint b = a += 10000;
    std::cout << ("10000" == a.to_string())<< "\n";
    std::cout << ("10000" == b.to_string())<< "\n";
    a += 0;
    std::cout << ("10000" == a.to_string())<< "\n";
    a += bigint("999999999999999999999999999999");
     //std::cout << a.to_string();
    //std::cout << ("1000000000000000000000000009999" == a.to_string())<< "\n";
    a += 1;
    //std::cout << ("1000000000000000000000000010000" == a.to_string())<< "\n";
    return 0;
}
